@using Montior.Blazor.Data
@using MudBlazor

<MudCard>
<MudTable Items="@groupTags.GroupTags" Hover="true" Breakpoint="Breakpoint.Sm"
          RowEditPreview="GroupEdit"
          RowEditCommit="GroupCommit">
	<ColGroup>
		<col style="width:150px;" />
		<col style="width:150px;" />
		<col style="width:150px;" />
		<col style="width:150px;" />
		<col style="width:150px;" />
	</ColGroup>
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh><strong>GroupName</strong></MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>
			<MudIconButton Icon="@(context.ShowValues == false ? @Icons.Material.Outlined.Sell : @Icons.Material.Filled.Sell)" Color="Color.Primary" Size="Size.Small" OnClick="@(() => ShowGroupsTagsInfo(context.Key))" />
			<MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveGroupItem(context))" Disabled="@groupDisable"/>
		</MudTd>
		<MudTd DataLabel="VmUniqueName">@context.Key</MudTd>
	</RowTemplate>
	<RowEditingTemplate>
		<MudTd/>
		<MudTd>
			<MudTextField @bind-Value="@context.Key" Required/>
		</MudTd>
		<MudTd/>
	</RowEditingTemplate>
	<ChildRowContent>
		@if (context.ShowValues)
		{
			<MudTr>
				<td colspan="100">
					<MudCard Elevation="0">
						<MudCardHeader>
							<CardHeaderContent>
								<MudText Typo="Typo.body1">Group Tags for <strong>@context.Key</strong></MudText>
							</CardHeaderContent>
						</MudCardHeader>
						<MudCardContent Class="pa-0">
							<MudTable Items="@context.Values" Context="groupContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0"
							          RowEditPreview="GroupTagEdit"
							          RowEditCommit="GroupTagCommit">
								<ColGroup>
									<col style="width:200px;" />
									<col style="width:150px;" />
								</ColGroup>
								<HeaderContent>
									<MudTh/>
									<MudTh><strong>Active</strong></MudTh>
									<MudTh><strong>Tag</strong></MudTh>
								</HeaderContent>
								<RowTemplate>
									<MudTd/>
									<MudTd DataLabel="Active">@groupContext.IsActive</MudTd>
									<MudTd DataLabel="Tag">@groupContext.Value</MudTd>
									<MudIconButton Disabled="@tagsDisable" Icon="@Icons.Material.Filled.RemoveCircle"  Color="Color.Error" OnClick="@(() => RemoveGroupTagItem(context, groupContext))"></MudIconButton>
								</RowTemplate>
								<RowEditingTemplate>
									<MudTd/>
									<MudTd>
										<MudCheckBox @bind-Value="@groupContext.IsActive" />
									</MudTd>									
									<MudTd>
										<MudTextField @bind-Value="@groupContext.Value" Required/>
									</MudTd>
									<MudTd/>
								</RowEditingTemplate>
							</MudTable>
						</MudCardContent>
					</MudCard>
					<MudIconButton Style="margin-left: 40px;" Icon="@Icons.Material.Filled.AddCircle" Color="Color.Success" Disabled="@tagsDisable" OnClick="@(() => { @context.Values.Add( new StringWrapper() { Value = "tag" } ); })" />
				</td>
			</MudTr>
		}
	</ChildRowContent>
</MudTable>
<MudIconButton Style="margin-left: 00px;" Icon="@Icons.Material.Filled.AddCircle"  Color="Color.Success" Disabled="@groupDisable" OnClick="@(
                                                                                         () =>
                                                                                         {
	                                                                                         @groupTags.GroupTags.Add(new()
	                                                                                         {
		                                                                                         Key = "group", Values = new List<StringWrapper>() { new StringWrapper() { Value = "tag" } },
	                                                                                         });
                                                                                         }
                                                                                         )" />
</MudCard>

@code
{
	[Parameter] public UI_GroupTags groupTags { get; set; }
	
	private void ShowGroupsTagsInfo(string groupName)
	{
		var vm = groupTags.GroupTags.FirstOrDefault(x => x.Key == groupName);
		if (vm != null)
			vm.ShowValues = !vm.ShowValues;
	}
	
	private bool tagsDisable;
	
	private void GroupTagEdit(object element)
	{
		tagsDisable = true;
		StateHasChanged();
	}

	private void GroupTagCommit(object element)
	{
		tagsDisable = false;
		StateHasChanged();
	}

	private void RemoveGroupTagItem(KeyListValue group, StringWrapper value)
	{
		group.Values.Remove(value);
	}
	
	private bool groupDisable;
	
	private void GroupEdit(object element)
	{
		groupDisable = true;
		StateHasChanged();
	}

	private void GroupCommit(object element)
	{
		groupDisable = false;
		StateHasChanged();
	}
	
	private void RemoveGroupItem(KeyListValue group)
	{
		groupTags.GroupTags.Remove(group);
	}
}