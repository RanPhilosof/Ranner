@page "/monitor"
@using AppMonitoring.SharedTypes
@using Monitor.Blazor.Interfaces
@using Monitor.Blazor.Services
@using Montior.Blazor.Data
@using Newtonsoft.Json

@inject IMonitorService monitorAgentService
@inject IDialogService DialogService
@inject IJSRuntime JS

<MudGrid >
	<MudCard Class="mt-4" Style="width: 98vw; padding-left: 20px; padding-right: 20px;">
		<MudText><strong>Configuration</strong></MudText>
		<ConfigurationOverride configuration="@configuration" />
		<MudText><strong>Images</strong></MudText>
		<Images imagesVariables="@imagesVariables" />
		<MudText><strong>Groups</strong></MudText>
		<TagsGroupsTable groupTags="@groupTags"/>
		<MudText><strong>Global Variables</strong></MudText>
		<GlobalEnvVarsTable globalVariables="@globalVariables" />
		<MudText><strong>Virtual Machines</strong></MudText>
		<VmsTable vmsData="@vmsData"/>
		<MudText><strong>Instances</strong></MudText>
		<InstancesTable OnOpenInBrowser="@OpenInBrowser" OnCompileClicked="@Compile" OnRunOrStopClicked="@RunOrStopChanged" instancesData="@instancesData"/>
	</MudCard>
	<MudStack Row="true">
		<MudPaper Class="pa-4 mt-4">
			<MudCard Class="mt-4" Style="display: flex; justify-content: space-between;">
				<LogsView/>
				<MudButton Variant="@(applyButtonVariant ? Variant.Filled : Variant.Outlined)" Color="Color.Primary" OnClick="@ApplyChanges">Apply Changes</MudButton>
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@KillAll">Kill All</MudButton>
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@StartAll">Start All</MudButton>							
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@CompileAll">Compile All</MudButton>
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@GetAllArgs">Get All Args</MudButton>			
			</MudCard>
		</MudPaper>
	
		<MudPaper Class="pa-4 mt-4">
			<MudCard Class="mt-4" Style="display: flex; justify-content: space-between;">
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@ToggleDebugRelease">~Dbg/Rls All</MudButton>
			</MudCard>
		</MudPaper>

		<MudPaper Class="pa-4 mt-4">
			<MudCard Class="mt-4" Style="display: flex; justify-content: space-between;">
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@Save">Save...</MudButton>
				<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@Load">Load...</MudButton>
			</MudCard>		
		</MudPaper>
		<MudPaper Class="pa-4 mt-4">
			<MudCard Style="padding-botom: 10px;">
				<MudTextField Variant="Variant.Outlined" Color="Color.Primary" @bind-Value="activeConfigurationFileName" />
			</MudCard>
		</MudPaper>
	</MudStack>
	<MudStack Row="true">
		<MudPaper Class="pa-4 mt-4">
			<MudSelect @ref="presetsMudSelect" T="string" SelectedValuesChanged="OnSelectedPresetChanged" Label="Start From Preset" AdornmentIcon="@Icons.Material.Outlined.PhonelinkSetup">
				@foreach (var preset in presets)
				{
					<MudSelectItem Value="@preset">@preset</MudSelectItem>
				}
			</MudSelect>
		</MudPaper>
	</MudStack>
</MudGrid>

<style>
	.custom-gray-button {
		color: #1E88E5;
		border-color: #1E88E5;
	}

	.custom-gray-button:hover {
		background-color: #e0e0e0;
	}
</style>

@code
{


	private MudSelect<string> presetsMudSelect;

	private void OnSelectedPresetChanged(IEnumerable<string> preset)
	{
		if (preset != null && preset.Count() == 1)
		{
			var p = preset.FirstOrDefault();

			if (!string.IsNullOrEmpty(p))
			{
				activeConfigurationFileName = monitorAgentService.UserFileClosetAvailableName(p);
				var settings = monitorAgentService.GetSettingsFromPresetsSettings(p).Clone();

				imagesVariables = settings.ImagesVariables;
				configuration = settings.Configuration;
				groupTags = settings.GroupTags;
				globalVariables = settings.GlobalVariables;
				vmsData = settings.VmsData;
				instancesData = settings.InstancesData;				
			}			
		}

		presetsMudSelect.SelectedValues = null;

		InvokeAsync(StateHasChanged);
	}

	private void Load()
	{
		var settings = monitorAgentService.GetSettingsFromUserSettings(activeConfigurationFileName).Clone();

		imagesVariables = settings.ImagesVariables;
		configuration = settings.Configuration;
		groupTags = settings.GroupTags;
		globalVariables = settings.GlobalVariables;
		vmsData = settings.VmsData;
		instancesData = settings.InstancesData;

		InvokeAsync(StateHasChanged);
	}

	private List<string> presets = new List<string>();

	private string activeConfigurationFileName;

	private void Save()
	{
		ApplyChanges();
	}

	private void RunOrStopChanged(int id)
	{
		ApplyChanges();
	}

	private void Compile(int compileInstanceId)
	{
		try
		{
			ApplyChanges();

			{
				var lastAppliedSettings = monitorAgentService.GetCurrentSettings().Clone();

				var ins = lastAppliedSettings.InstancesData.Instances.FirstOrDefault(x => x.Id == compileInstanceId);
				if (ins != null)
				{
					var vm = lastAppliedSettings.VmsData.VmsDataList.FirstOrDefault(x => x.UniqueName == ins.VmUniqueName);
					if (vm != null)
					{
						var ip = vm.IpAddress;
						var port = vm.Port;

						if (!string.IsNullOrEmpty(ins.CsProj))
							monitorAgentService.SetCompilerRequest(new IpAddress() { Ip = ip, Port = port }, new CompileInfo() { InstanceId = compileInstanceId, Configuration = ins.Configuration, });
					}
				}				
			}
		}
		catch (Exception ex)
		{
			Console.Write(ex);
		}
	}

	private async void OpenInBrowser(int instanceId)
	{
		try
		{
			{
				var lastAppliedSettings = monitorAgentService.GetCurrentSettings().Clone();

				var ins = lastAppliedSettings.InstancesData.Instances.FirstOrDefault(x => x.Id == instanceId);
				if (ins != null)
				{
					if (!string.IsNullOrEmpty(ins.RestApiPort))
					{
						var vm = lastAppliedSettings.VmsData.VmsDataList.FirstOrDefault(x => x.UniqueName == ins.VmUniqueName);
						if (vm != null)
						{
							var ip = vm.IpAddress;
							if (!string.IsNullOrEmpty(ip))
							{
								string urlLink = string.Empty;

								if (ins.ApplicationFileName.ToLowerInvariant().Contains("blazor") 
									|| 
									ins.ApplicationPath.ToLowerInvariant().Contains("blazor")
									||
									ins.ApplicationWorkingDirectory.ToLowerInvariant().Contains("blazor"))
								{
									urlLink = $"http://{ip}:{ins.RestApiPort}";
								}
								else
								{
									urlLink = $"http://{ip}:{ins.RestApiPort}/swagger";
								}

								await JS.InvokeVoidAsync("open", urlLink, "_blank");
							}
						}
					}
				}
			}
		}
		catch (Exception ex)
		{
			Console.Write(ex);
		}
	}

	private void ApplyChanges()
	{		
		var monitorPageSettings = new MonitorPageSettings()
			{				
				CurrentFileName = activeConfigurationFileName,
				ImagesVariables = imagesVariables,
				Configuration = configuration,
				InstancesData = instancesData,
				VmsData = vmsData,
				GroupTags = groupTags,
				GlobalVariables = globalVariables,
			};

		monitorAgentService.SetAllAgentsSettings(monitorPageSettings.Clone());
	}

	private void KillAll()
	{
		try
		{
			foreach (var inst in instancesData.Instances)
			{
				try
				{
					if (!inst.Disabled && !inst.DisabledByGroups)
						inst.RunOrStop = false;
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}

		ApplyChanges();
	}

	private void CompileAll()
	{
		try
		{
			ApplyChanges();

			foreach (var inst in instancesData.Instances)
			{
				try
				{
					if (!inst.Disabled && !inst.DisabledByGroups)
						Compile(inst.Id);
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}	
	}

	private void ToggleDebugRelease()
	{
		const string debugString = "Debug";
		const string releaseString = "Release";

		try
		{
			var configurationCount = new Dictionary<string, int>();
			foreach (var inst in instancesData.Instances)
			{
				try
				{
					if (!inst.Disabled && !inst.DisabledByGroups)
					{
						if (!string.IsNullOrEmpty(inst.Configuration)
							&&
							(inst.Configuration.ToLower() == debugString.ToLower()
							||
							inst.Configuration.ToLower() == releaseString.ToLower()))
						{
							if (!configurationCount.ContainsKey(inst.Configuration.ToLower()))
								configurationCount.Add(inst.Configuration.ToLower(), 1);

							configurationCount[inst.Configuration.ToLower()]++;
						}
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}

			if (configurationCount.Count > 0)
			{
				var configNewValue = debugString;

				var configToToggle = configurationCount.OrderBy(x => x.Value).First().Key;
				if (configToToggle == debugString.ToLower())
					configNewValue = releaseString;

				foreach (var inst in instancesData.Instances)
				{
					try
					{
						if (!string.IsNullOrEmpty(inst.Configuration)
							&&
							(inst.Configuration.ToLower() == debugString.ToLower()
							||
							inst.Configuration.ToLower() == releaseString.ToLower()))
						{
							inst.Configuration = configNewValue;
						}
					}
					catch (Exception ex)
					{
						Console.WriteLine(ex);
					}
				}
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}

		ApplyChanges();
	}

	private void GetAllArgs()
	{
		try
		{
			ApplyChanges();

			Thread.Sleep(1000);

			List<List<string>> args = new List<List<string>> ();

			var currentSettingsInAgentsFormat = monitorAgentService.GetCurrentSettingsInAgentsFormat();
			foreach (var vm in currentSettingsInAgentsFormat)
			{
				var agentSet = vm.Value;
				foreach (var app in agentSet.Item2.ProcessInstancesSettings)
				{
					var appInst = new List<string>() { { app.Name } };															
					appInst.Add($"Configurations:");
					appInst.Add($"\tVmUniqueName={app.VmUniqueName}");
					appInst.Add($"\tApplicationFileName={app.ApplicationFileName}");
					appInst.Add($"\tApplicationPath={app.ApplicationPath}");
					appInst.Add($"\tApplicationWorkingDirectory={app.ApplicationWorkingDirectory}");
					appInst.Add($"\tCsProj={app.CsProj}");
					appInst.Add($"\tRestApiPor={app.RestApiPort}");
					appInst.Add($"\tUseImage={app.UseImage}");
					appInst.Add($"\tZipFileName={app.ZipFileName}");
					appInst.Add($"\tUniqueImageName={app.UniqueImageName}");
					appInst.Add($"\tFolderToExtract={app.FolderToExtract}");
					appInst.Add($"\tRannerMonitorBaseUrl={app.RannerMonitorBaseUrl}");
					appInst.Add($"Arguments:");
					appInst.Add($"\t{app.Arguments}");
					appInst.Add($"EnvVars:");
					foreach (var envVar in app.Variables)
						appInst.Add($"\t{envVar.Item1}={envVar.Item2}");
					args.Add(appInst);
				}
			}

			var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge };
			var parameters = new DialogParameters<TabsDialog>();
			parameters.Add("Tabs", args);
			parameters.Add("Header", "Application Arguments & Environemnt Variables Info");

			DialogService.ShowAsync<TabsDialog>("", parameters, options);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private void StartAll()
	{
		try
		{
			foreach (var inst in instancesData.Instances)
			{
				try
				{
					if (!inst.Disabled && !inst.DisabledByGroups)
						inst.RunOrStop = true;
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}

		ApplyChanges();
	}

	private UI_ImagesVariables imagesVariables { get; set; } = new UI_ImagesVariables();
	private UI_Configuration configuration { get; set; } = new UI_Configuration();
	private UI_GlobalVariables globalVariables { get; set; } = new UI_GlobalVariables();
	private UI_GroupTags groupTags { get; set; } = new UI_GroupTags();
	private UI_VmsData vmsData { get; set; } = new UI_VmsData();
	private UI_InstancesData instancesData { get; set; } = new UI_InstancesData();
	//private List<string> possibleProjects { get; set; } = new List<string>();

	private Timer updateTimer;

	protected override void OnInitialized()
	{
		InitPresetsList();

		var m = monitorAgentService.GetCurrentSettings().Clone();

		imagesVariables = m.ImagesVariables;
		configuration = m.Configuration;
		groupTags = m.GroupTags;
		globalVariables = m.GlobalVariables;
		instancesData = m.InstancesData;
		vmsData = m.VmsData;
		activeConfigurationFileName = m.CurrentFileName;

		//possibleProjects = instancesData.PossibleProjects;

		updateTimer = new Timer(UpdateStatusWrapper, null, 2500, Timeout.Infinite);

		monitorAgentService.SettingsChangedFromRestApi -= SettingsChangedFromRestApi;
		monitorAgentService.SettingsChangedFromRestApi += SettingsChangedFromRestApi;
	}

	private void SettingsChangedFromRestApi(MonitorPageSettings monitorPageSettings)
	{
		imagesVariables = monitorPageSettings.ImagesVariables;
		configuration = monitorPageSettings.Configuration;
		groupTags = monitorPageSettings.GroupTags;
		globalVariables = monitorPageSettings.GlobalVariables;
		instancesData = monitorPageSettings.InstancesData;
		vmsData = monitorPageSettings.VmsData;
	}

	private void InitPresetsList()
	{
		presets.AddRange(monitorAgentService.GetPresetsSettingsList());
		//possibleProjects = monitorAgentService.GetPossibleProjectsList();
	}

	private bool applyButtonVariant = false;


	private void CompareCurrentVsLastApply()
	{
		try
		{
			var lastAppliedSettings = monitorAgentService.GetCurrentSettings();

			applyButtonVariant = (!lastAppliedSettings.GroupTags.Compare(groupTags)
				||
				!lastAppliedSettings.GlobalVariables.Compare(globalVariables)
				||
				!lastAppliedSettings.VmsData.Compare(vmsData)
				||
				!lastAppliedSettings.InstancesData.Compare(instancesData))
				||
				!lastAppliedSettings.Configuration.Compare(configuration)
				||
				!lastAppliedSettings.ImagesVariables.Compare(imagesVariables);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private void UpdateStatusWrapper(object obj)
	{
		try
		{
			UpdateStatus(imagesVariables, configuration, groupTags, globalVariables, vmsData, instancesData);
			CompareCurrentVsLastApply();
			InvokeAsync(StateHasChanged);
		}
		catch
		{

		}
		finally
		{
			updateTimer.Change(2500, Timeout.Infinite);	
		}
	}

	private void UpdateStatus(UI_ImagesVariables imagesVariables, UI_Configuration configuration, UI_GroupTags groupTags, UI_GlobalVariables globalVariables, UI_VmsData vmsData, UI_InstancesData instancesData)
	{
		var infos = monitorAgentService.GetAgentsPeriodicInfos();

		//var infos = new Dictionary<string, Tuple<VmInfo, Dictionary<int, ProcessInstanceInfo>>>();		
		//
		//try
		//{
		//
		//	
		//	foreach (var vm in vmsData.VmsDataList.Select(x => new { vmName = x.UniqueName, ipAdd = new IpAddress() { Ip = x.IpAddress, Port = x.Port } }))
		//	{
		//		try
		//		{
		//			var v = monitorAgentService.GetVmInfoAndListProcessInstaceInfo(vm.ipAdd);
		//			var vv = Tuple.Create(v.Item1, v.Item2.Where(x => x.Id.HasValue).ToDictionary(x => x.Id.Value, x => x));
		//
		//			infos.TryAdd(vm.vmName, vv);
		//		}
		//		catch (Exception ex)
		//		{
		//			Console.WriteLine(ex);
		//		}
		//	}
		//}
		//catch (Exception ex)
		//{
		//	Console.WriteLine(ex);
		//}

		try
		{
			foreach (var vmData in vmsData.VmsDataList)
			{
				if (infos.ContainsKey(vmData.UniqueName))
				{
					var inf = infos[vmData.UniqueName];
					vmData.ActualVariables = inf.Item1.Variables.Select(x => new KeyValue() { Key = x.Item1, Value = x.Item2}).ToList();
					vmData.LastUpdateTime = new TimeInfo();
					vmData.LastUpdateTime.Time = DateTime.Now;
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}

		var instanceInfos = new Dictionary<int, UI_Instance>();

		try
		{

			foreach (var i in instancesData.Instances)
			{
				try
				{
					instanceInfos.TryAdd(i.Id, i);
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}

		try
		{			
			foreach (var instData in instanceInfos)
			{
				try
				{

					if (infos.ContainsKey(instData.Value.VmUniqueName))
					{
						var instInVm= infos[instData.Value.VmUniqueName];

						if (instInVm.Item2.ContainsKey(instData.Value.Id))
						{
							var instStatus = instInVm.Item2[instData.Value.Id];

							instData.Value.IsRunning = instStatus.IsCompiling ? "Compiling" : instStatus.IsRunning ? "Running" : "Stopped";

							if (instData.Value.IsRunning == "Running")
							{
								instData.Value.ZipFileName = instStatus.ZipFileName;
								instData.Value.ProcessName = instStatus.ProcessName;
								instData.Value.ProcessId = instStatus.ProcessId;
								instData.Value.RunningFor = instStatus.LastStartTime.HasValue ? DateTime.Now - instStatus.LastStartTime.Value : new TimeSpan(0, 0, 0);
							}
							else
							{
								instData.Value.ZipFileName = instStatus.ZipFileName;
								instData.Value.ProcessName = string.Empty;
								instData.Value.ProcessId = null;
								instData.Value.RunningFor = new TimeSpan(0, 0, 0);
							}
						}
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}
}
